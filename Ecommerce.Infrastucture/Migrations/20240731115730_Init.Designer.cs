// <auto-generated />
using System;
using Ecommerce.Infrastucture.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce.Infrastucture.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240731115730_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecommerce.Domain.Entities.Attributes", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubCategoryName1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.HasIndex("SubCategoryName");

                    b.HasIndex("SubCategoryName1");

                    b.ToTable("Attributes", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Brands", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Brands", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Categories", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Images", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Size")
                        .HasColumnType("float");

                    b.HasKey("Name");

                    b.HasIndex("ProductId");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductAttributes", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttributeName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId", "AttributeName");

                    b.ToTable("ProductAttributes", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Products", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BrandsName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<bool>("FreeShipping")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShow")
                        .HasColumnType("bit");

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)")
                        .HasAnnotation("MinValue", 0.01m);

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int")
                        .HasAnnotation("MinValue", 1);

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandName");

                    b.HasIndex("BrandsName");

                    b.HasIndex("CategoryName");

                    b.HasIndex("CategoryName1");

                    b.HasIndex("SubCategoryName");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Rating", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "UserId");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Review", b =>
                {
                    b.Property<string>("ProductId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId", "UserId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.SubCategories", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoriesName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ParentSubcategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Name");

                    b.HasIndex("CategoriesName");

                    b.HasIndex("CategoryName");

                    b.HasIndex("ParentSubcategoryName");

                    b.ToTable("SubCategories", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Attributes", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.SubCategories", null)
                        .WithMany("Attributes")
                        .HasForeignKey("SubCategoryName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.SubCategories", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryName1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Images", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Products", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductAttributes", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Products", null)
                        .WithMany("ProductAttributes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Products", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Brands", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandName")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Ecommerce.Domain.Entities.Brands", null)
                        .WithMany("Products")
                        .HasForeignKey("BrandsName");

                    b.HasOne("Ecommerce.Domain.Entities.Categories", null)
                        .WithMany("Products")
                        .HasForeignKey("CategoryName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.Categories", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryName1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.SubCategories", "SubCategory")
                        .WithMany()
                        .HasForeignKey("SubCategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Rating", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Products", null)
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Review", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Products", null)
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.SubCategories", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.Categories", null)
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoriesName");

                    b.HasOne("Ecommerce.Domain.Entities.Categories", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ecommerce.Domain.Entities.SubCategories", "ParentSubcategory")
                        .WithMany("SubCategorys")
                        .HasForeignKey("ParentSubcategoryName")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("ParentSubcategory");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Brands", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Categories", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.Products", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProductAttributes");

                    b.Navigation("Ratings");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.SubCategories", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("SubCategorys");
                });
#pragma warning restore 612, 618
        }
    }
}
